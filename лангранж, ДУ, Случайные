import numpy as np
import matplotlib.pyplot as plt

def system(x, y):
    y0, y1 = y
    dydx = [y1, -y1 - y0]
    return dydx

y0 = [0, 1]
x = np.linspace(-10, 10, 101)

h = x[1] - x[0] # определение шага сетки
y = np.zeros([len(x), 2]) # массив для хранения значений y и y'
y[0] = y0 # задание начальных условий
for i in range(1, len(x)):
    y[i] = y[i-1] + h * system(x[i-1], y[i-1]) # метод Эйлера для решения ДУ


plt.plot(x, y[:, 0], 'b', label='y(x)')
plt.plot(x, y[:, 1], 'g', label="y'(x)")
plt.legend(loc='best')
plt.xlabel('x')
plt.grid()
plt.show()

----------------------------------------

import numpy as np
import matplotlib.pyplot as plt
def lagrange(x, y, z):
    n = len(x)                                          # узнаем длинну x
    result = 0.0                                        # переменная результата
    for i in range(n):                                  # вычисляются все члены многочлена и суммируются в result
        term = 1.0
        for j in range(n):                              # вложенный цикл, где j = 0, 1, 2, ..., n-1 и j ≠ i, определяет произведение всех выражений (z - x[j]) / (x[i] - x[j]), которые составляют член многочлена Лагранжа для i-го элемента из массива x.
            if i != j:
                term *= (z - x[j]) / (x[i] - x[j])      # значение этого члена вычисляется как произведение y[i] и term, где term - это произведение всех определенных во вложенном цикле множителей.
        result += y[i] * term                           # после цикла вычисляется сумма всех членов многочлена Лагранжа, что и является результатом функции - значение многочлена Лагранжа в точке z.
    return result

x = [1, 2, 4, 5]
y = [2, 1, 3, 4]
x_interp = np.linspace(min(x), max(x), 100)              # интервал для построения графика
y_interp = [lagrange(x, y, xi) for xi in x_interp]       # находим значения с помощью метода лангранж
plt.plot(x, y, 'o', label='Исходные точки')              # строим график
plt.plot(x_interp, y_interp, label='Интерполяция')
plt.legend()
plt.show()

-----------------------------------------------------

import numpy as np
import matplotlib.pyplot as plt

def system(x, y):
    y0, y1 = y
    dydx = [y1, -y1 - y0]      # заданные условия y'0=y1; y'1=-y1-y0
    return dydx

y0 = [0, 1]                    # y1(0)= 0; y2(0)=1
x = np.linspace(-10, 10, 101)

h = x[1] - x[0]                               # определение шага сетки
y = np.zeros([len(x), 2])                     # массив для хранения значений y и y'
y[0] = y0                                     # задание начальных условий
for i in range(1, len(x)):
    y[i] = y[i-1] + h * np.array(system(x[i-1], y[i-1])) # метод Эйлера для решения ДУ


plt.plot(x, y[:, 0], 'b', label='y(x)') # рисование графиков
plt.plot(x, y[:, 1], 'g', label="y'(x)")
plt.legend(loc='best')                  # легенда
plt.xlabel('x')
plt.grid()                              # сетка
plt.show()
